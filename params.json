{"name":"Gaussian Process emulators for radiative transfer mdoels","tagline":"Fast surrogates for typical RT models","body":"GP emulators\r\n==============\r\n\r\n.. image:: https://zenodo.org/badge/19469/jgomezdans/gp_emulator.svg\r\n      :target: https://zenodo.org/badge/latestdoi/19469/jgomezdans/gp_emulator\r\n\r\n:Info: Gaussian process (GP) emulators for Python\r\n:Author: J Gomez-Dans <j.gomez-dans@ucl.ac.uk>\r\n:Date: $Date: 2015-03-17 16:00:00 +0000  $\r\n:Description: README file\r\n\r\n\r\n.. image:: http://www.nceo.ac.uk/images/NCEO_logo_lrg.jpg\r\n   :scale: 50 %\r\n   :alt: NCEO logo\r\n   :align: right\r\n   \r\n.. image:: http://www.esa.int/esalogo/images/logotype/img_colorlogo_darkblue.gif\r\n   :scale: 20 %\r\n   :alt: ESA logo\r\n   :align: left\r\n\r\nThis repository contains an implementation of GPs for emulation of radiative transfer\r\nmodels in Python. This particular implementation is focused on emulating univariate\r\noutput models (e.g. emulating reflectance or radiance for a single sensor band)\r\nand multivariate outputs (e.g. emulating reflectance/radiance over the entire\r\nsolar reflective domain). The emulators also calculate the gradient of the\r\nemulated model and the Hessian.\r\n\r\nYou can install the software with \r\n\r\n        python setup.py install\r\n\r\nThe only requirements are (if memory serves) numpy and scipy.\r\n\r\nAt some point, pointers to a library of emulators of popular vegetation and\r\natmospheric RT codes will be provided.\r\n\r\nCitation\r\n----------\r\n\r\nIf you use this code, we would be grateful if you cited the following paper:\r\n\t\r\n\tGÃ³mez-Dans, J.L.; Lewis, P.E.; Disney, M. Efficient Emulation of Radiative Transfer Codes Using Gaussian Processes and Application to Land Surface Parameter Inferences. Remote Sens. 2016, 8, 119. DOI:`10.3390/rs8020119 <http://www.mdpi.com/2072-4292/8/2/119>`_\r\n","google":"UA-25702318-1","note":"Don't delete this file! It's used internally to help with page regeneration."}